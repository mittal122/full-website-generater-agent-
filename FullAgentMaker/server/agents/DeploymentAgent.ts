import { BaseAgent, AgentResult } from "./AgentOrchestrator";
import { storage } from "../storage";

export class DeploymentAgent extends BaseAgent {
  async execute(projectId: string, config: any, previousOutputs: Record<string, any>): Promise<AgentResult> {
    try {
      await this.log(projectId, "info", "Starting project packaging...");
      await this.updateProgress(projectId, 10);

      const validatorOutput = previousOutputs.Validator;
      const frontendOutput = previousOutputs.Frontend;
      const backendOutput = previousOutputs.Backend;

      if (!validatorOutput || !frontendOutput) {
        throw new Error("Required outputs not found from previous agents");
      }

      await this.updateProgress(projectId, 30);

      // Get all project files
      const projectFiles = await storage.getProjectFiles(projectId);
      
      await this.log(projectId, "info", `Packaging ${projectFiles.length} generated files...`);

      // Create deployment package structure
      const deploymentPackage = this.createDeploymentPackage(
        projectFiles,
        config,
        validatorOutput,
        frontendOutput,
        backendOutput
      );

      await this.updateProgress(projectId, 70);

      // Generate deployment documentation
      const deploymentDocs = this.generateDeploymentDocs(config, deploymentPackage);

      await this.updateProgress(projectId, 90);

      await this.log(projectId, "success", "Project packaging completed successfully");
      await this.updateProgress(projectId, 100);

      return {
        success: true,
        output: {
          packageStructure: deploymentPackage.structure,
          fileCount: deploymentPackage.files.length,
          deploymentInstructions: deploymentDocs,
          isProductionReady: validatorOutput.isProductionReady,
          qualityScore: validatorOutput.qualityScore
        },
        files: [
          ...deploymentPackage.files,
          {
            path: '/README.md',
            content: deploymentDocs.readme,
            language: 'markdown'
          },
          {
            path: '/DEPLOYMENT.md',
            content: deploymentDocs.deployment,
            language: 'markdown'
          },
          {
            path: '/.env.example',
            content: deploymentDocs.envExample,
            language: 'text'
          }
        ]
      };

    } catch (error: any) {
      await this.log(projectId, "error", `Project packaging failed: ${error.message}`);
      return {
        success: false,
        error: error.message
      };
    }
  }

  private createDeploymentPackage(
    projectFiles: any[],
    config: any,
    validatorOutput: any,
    frontendOutput: any,
    backendOutput: any
  ) {
    const structure = {
      frontend: [] as string[],
      backend: [] as string[],
      docs: [] as string[],
      config: [] as string[]
    };

    const files: Array<{ path: string; content: string; language: string }> = [];

    // Organize files by type
    for (const file of projectFiles) {
      if (file.path.includes('/src/') || file.path.includes('.tsx') || file.path.includes('.jsx')) {
        structure.frontend.push(file.path);
      } else if (file.path.includes('/server/') || file.path.includes('server.') || file.path.includes('index.ts')) {
        structure.backend.push(file.path);
      } else if (file.path.includes('.json') || file.path.includes('.env')) {
        structure.config.push(file.path);
      }

      files.push({
        path: file.path,
        content: file.content,
        language: file.language || 'text'
      });
    }

    // Add validation fixes if any
    if (validatorOutput.fixes && validatorOutput.fixes.length > 0) {
      for (const fix of validatorOutput.fixes) {
        files.push(fix);
        structure.frontend.push(fix.path);
      }
    }

    return { structure, files };
  }

  private generateDeploymentDocs(config: any, deploymentPackage: any) {
    const hasBackend = deploymentPackage.structure.backend.length > 0;
    
    const readme = `# ${config.projectName}

${config.description}

## Generated by AI Development Team

This project was automatically generated using AI agents specialized in:
- ✅ Requirement Analysis
- ✅ Frontend Development (React + TypeScript)
${hasBackend ? '- ✅ Backend Development (Node.js + Express)' : '- ⚪ Backend (Not Required)'}
- ✅ Code Validation & Quality Assurance
- ✅ Deployment Packaging

## Project Structure

\`\`\`
${this.generateProjectStructure(deploymentPackage.structure)}
\`\`\`

## Quick Start

### Prerequisites
- Node.js 18+ and npm
${hasBackend ? '- Database (if applicable)' : ''}

### Installation

1. **Install dependencies:**
   \`\`\`bash
   npm install
   \`\`\`

${hasBackend ? `2. **Set up environment variables:**
   \`\`\`bash
   cp .env.example .env
   # Edit .env with your configuration
   \`\`\`

3. **Start the application:**
   \`\`\`bash
   # Development mode
   npm run dev
   
   # Production mode
   npm run build
   npm start
   \`\`\`
` : `2. **Start the application:**
   \`\`\`bash
   npm start
   \`\`\`
`}

## Features

- 🎨 Modern React with TypeScript
- 🎭 Tailwind CSS for styling
- 📱 Responsive design
- 🌙 Dark mode support
${hasBackend ? '- 🔧 RESTful API backend' : ''}
${hasBackend ? '- 🔐 Authentication (if applicable)' : ''}
- ✅ Type-safe development
- 🚀 Production-ready code

## Tech Stack

**Frontend:**
- React 18+
- TypeScript
- Tailwind CSS
- React Router (if applicable)

${hasBackend ? `**Backend:**
- Node.js
- Express.js
- TypeScript
- ${config.database !== 'none' ? config.database : 'No database'}
` : ''}

## Scripts

- \`npm start\` - Start the application
- \`npm run build\` - Build for production
- \`npm run test\` - Run tests
- \`npm run dev\` - Development mode with hot reload

## Contributing

This project was generated by AI agents. To make changes:

1. Modify the source code as needed
2. Test your changes thoroughly
3. Update documentation if necessary

## Support

This is an AI-generated project. For issues or improvements, consider:
- Code review by a human developer
- Testing in a staging environment
- Performance optimization
- Security audit

---

*Generated with ❤️ by AI Development Team*
`;

    const deployment = `# Deployment Guide

## Local Development

### Setup
1. Clone the repository
2. Install dependencies: \`npm install\`
${hasBackend ? '3. Configure environment variables in \`.env\`' : ''}
${hasBackend ? '4. Start development server: \`npm run dev\`' : '3. Start development server: \`npm start\`'}

## Production Deployment

### Option 1: Static Hosting (Frontend Only)
${!hasBackend ? `
Perfect for this project since it's frontend-only:

1. **Build the project:**
   \`\`\`bash
   npm run build
   \`\`\`

2. **Deploy to static hosting:**
   - **Vercel:** \`npx vercel --prod\`
   - **Netlify:** Drag and drop \`build\` folder
   - **GitHub Pages:** Push to \`gh-pages\` branch
   - **AWS S3:** Upload \`build\` folder contents
` : `
Only suitable if you remove backend dependencies.
`}

${hasBackend ? `### Option 2: Full-Stack Hosting

1. **Prepare for production:**
   \`\`\`bash
   npm run build
   \`\`\`

2. **Deploy to platforms:**

   **Heroku:**
   \`\`\`bash
   heroku create your-app-name
   git push heroku main
   \`\`\`

   **Railway:**
   \`\`\`bash
   railway login
   railway init
   railway up
   \`\`\`

   **DigitalOcean App Platform:**
   - Connect your repository
   - Configure build and run commands
   - Set environment variables

3. **Environment Variables:**
   Set these in your hosting platform:
   \`\`\`
   NODE_ENV=production
   PORT=3000
   DATABASE_URL=your_database_url
   JWT_SECRET=your_jwt_secret
   \`\`\`
` : ''}

### Option 3: Docker Deployment

1. **Create Dockerfile:**
   \`\`\`dockerfile
   FROM node:18-alpine
   WORKDIR /app
   COPY package*.json ./
   RUN npm ci --only=production
   COPY . .
   RUN npm run build
   EXPOSE 3000
   CMD ["npm", "start"]
   \`\`\`

2. **Build and run:**
   \`\`\`bash
   docker build -t ${config.projectName.toLowerCase()} .
   docker run -p 3000:3000 ${config.projectName.toLowerCase()}
   \`\`\`

## Performance Optimization

- Enable gzip compression
- Use CDN for static assets
- Implement caching strategies
- Monitor performance metrics
- Set up error tracking

## Security Checklist

- [ ] Update all dependencies
- [ ] Review environment variables
- [ ] Enable HTTPS
- [ ] Implement rate limiting
- [ ] Add security headers
- [ ] Validate all inputs
- [ ] Use secure authentication

## Monitoring

Set up monitoring for:
- Application performance
- Error tracking
- User analytics
- Infrastructure health

---

*This deployment guide is generated for AI-created code. Please review and test thoroughly before production use.*
`;

    const envExample = `# Application Configuration
NODE_ENV=development
PORT=3000

# Database Configuration (if applicable)
${config.database !== 'none' ? `DATABASE_URL=your_${config.database}_connection_string` : '# No database required'}

# API Keys (if applicable)
${config.features.includes('auth') ? 'JWT_SECRET=your_jwt_secret_here' : ''}
${config.features.includes('payments') ? 'STRIPE_SECRET_KEY=your_stripe_secret_key' : ''}

# External Services
${config.features.includes('ai') ? 'OPENAI_API_KEY=your_openai_api_key' : ''}

# CORS Configuration
CORS_ORIGIN=http://localhost:3000

# Logging
LOG_LEVEL=info
`;

    return { readme, deployment, envExample };
  }

  private generateProjectStructure(structure: any): string {
    let output = '';
    
    if (structure.frontend.length > 0) {
      output += 'src/\n';
      output += '├── components/\n';
      output += '├── pages/\n';
      output += '├── utils/\n';
      output += '└── App.tsx\n';
    }

    if (structure.backend.length > 0) {
      output += 'server/\n';
      output += '├── routes/\n';
      output += '├── models/\n';
      output += '├── middleware/\n';
      output += '└── index.ts\n';
    }

    output += 'package.json\n';
    output += 'README.md\n';
    output += 'DEPLOYMENT.md\n';
    output += '.env.example\n';

    return output;
  }
}